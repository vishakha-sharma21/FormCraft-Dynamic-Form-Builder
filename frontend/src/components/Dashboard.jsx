import { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import InputQuery from './InputQuery';
import axios from 'axios';
import { FiPlus, FiGrid, FiFileText, FiRefreshCw, FiAlertCircle } from 'react-icons/fi';
import { toast } from 'react-hot-toast';

const Dashboard = () => {
Â  const { isLoggedIn, user, token } = useSelector((state) => state.auth);
Â  const [forms, setForms] = useState([]);
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState('');
Â  const [showCreateForm, setShowCreateForm] = useState(false);
Â  const navigate = useNavigate();

Â  const fetchForms = async () => {
Â  Â  if (!user || !token) return;
Â  Â  setLoading(true); // Set loading to true when fetching starts

Â  Â  try {
Â  Â  Â  const response = await axios.get(`http://localhost:3000/api/user/${user.user_id}`, {
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Authorization: `Bearer ${token}`,
Â  Â  Â  Â  },
Â  Â  Â  });
Â  Â  Â  setForms(response.data.forms);
Â  Â  Â  setError(''); // Clear any previous errors
Â  Â  } catch (err) {
Â  Â  Â  setError('Unable to load forms. Please try again later.');
Â  Â  Â  console.error('Error fetching forms:', err);
Â  Â  Â  toast.error('Failed to load forms.');
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  useEffect(() => {
Â  Â  if (!isLoggedIn || !user || !token) {
Â  Â  Â  navigate('/signin');
Â  Â  Â  return;
Â  Â  }
Â  Â  fetchForms();
Â  }, [isLoggedIn, user, token, navigate]);

Â  const handleSaveForm = async ({ title, fields }) => {
Â  Â  try {
Â  Â  Â  if (!user || !user.user_id) {
Â  Â  Â  Â  throw new Error('User not authenticated');
Â  Â  Â  }

Â  Â  Â  const payload = {
Â  Â  Â  Â  userId: user.user_id,
Â  Â  Â  Â  title: title,
Â  Â  Â  Â  fields: fields,
Â  Â  Â  };

Â  Â  Â  await axios.post('http://localhost:3000/api/forms/save', payload, {
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Authorization: `Bearer ${token}`,
Â  Â  Â  Â  Â  'Content-Type': 'application/json'
Â  Â  Â  Â  },
Â  Â  Â  });

Â  Â  Â  toast.success('Form saved successfully!');
Â  Â  Â  await fetchForms();
Â  Â  Â  setShowCreateForm(false);

Â  Â  } catch (error) {
Â  Â  Â  console.error('Error saving form:', error);
Â  Â  Â  toast.error('Failed to save form. Please try again.');
Â  Â  }
Â  };

Â  const handleCreateNewForm = () => {
Â  Â  setShowCreateForm(true);
Â  };

Â  const handleBrowseTemplates = () => {
Â  Â  navigate('/example');
Â  };

Â  const handleViewAllForms = () => {
Â  Â  navigate('/forms');
Â  };

Â  const getStatusBadge = (status) => {
Â  Â  const baseClasses = 'px-2 py-1 rounded-full text-xs font-medium';
Â  Â  switch (status) {
Â  Â  Â  case 'active':
Â  Â  Â  Â  return `${baseClasses} bg-green-100 text-green-800`;
Â  Â  Â  case 'draft':
Â  Â  Â  Â  return `${baseClasses} bg-yellow-100 text-yellow-800`;
Â  Â  Â  case 'archived':
Â  Â  Â  Â  return `${baseClasses} bg-gray-100 text-gray-800`;
Â  Â  Â  default:
Â  Â  Â  Â  return `${baseClasses} bg-gray-100 text-gray-800`;
Â  Â  }
Â  };

Â  const formatDate = (dateString) => {
Â  Â  const date = new Date(dateString);
Â  Â  return date.toLocaleDateString('en-US', {
Â  Â  Â  month: 'numeric',
Â  Â  Â  day: 'numeric',
Â  Â  Â  year: 'numeric',
Â  Â  });
Â  };

Â  const totalForms = forms.length;
Â  const activeForms = forms.filter((form) => form.status === 'active').length;
Â  const totalResponses = forms.reduce((sum, form) => sum + (form.responses || 0), 0);

Â  if (loading) {
Â  Â  return (
Â  Â  Â  <div className="min-h-screen bg-gray-50 flex items-center justify-center">
Â  Â  Â  Â  <div className="text-gray-600 flex items-center gap-2">
Â  Â  Â  Â  Â  <FiRefreshCw className="animate-spin" />
Â  Â  Â  Â  Â  Loading dashboard...
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  return (
Â  Â  <div className="min-h-screen bg-gray-50 p-6">
Â  Â  Â  <div className="max-w-7xl mx-auto">
Â  Â  Â  Â  <div className="mb-8">
Â  Â  Â  Â  Â  <h1 className="text-3xl font-bold text-gray-900 mb-2">
Â  Â  Â  Â  Â  Â  Welcome back, {user.firstName || user.name || user.email}! ðŸ‘‹
Â  Â  Â  Â  Â  </h1>
Â  Â  Â  Â  Â  <p className="text-gray-600">Ready to create amazing forms today?</p>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
Â  Â  Â  Â  Â  <div className="bg-white rounded-lg shadow-sm border p-6">
Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between">
Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600 text-sm font-medium">Total Forms</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-3xl font-bold text-gray-900">{totalForms}</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500 text-sm">All time created</p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-100 p-3 rounded-lg">
Â  Â  Â  Â  Â  Â  Â  Â  <FiFileText className="w-6 h-6 text-gray-600" />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="bg-white rounded-lg shadow-sm border p-6">
Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between">
Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600 text-sm font-medium">Active Forms</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-3xl font-bold text-gray-900">{activeForms}</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500 text-sm">Currently collecting responses</p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-100 p-3 rounded-lg">
Â  Â  Â  Â  Â  Â  Â  Â  <FiGrid className="w-6 h-6 text-gray-600" />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="bg-white rounded-lg shadow-sm border p-6">
Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between">
Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600 text-sm font-medium">Total Responses</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-3xl font-bold text-gray-900">{totalResponses.toLocaleString()}</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500 text-sm">Across all forms</p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-100 p-3 rounded-lg">
Â  Â  Â  Â  Â  Â  Â  Â  <svg className="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
Â  Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="bg-white rounded-lg shadow-sm border p-6 mb-8">
Â  Â  Â  Â  Â  <div className="mb-6">
Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-bold text-gray-900 mb-2">Create Your Next Form</h2>
Â  Â  Â  Â  Â  Â  <p className="text-gray-600">Start building a new form from scratch or choose from our templates</p>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="flex gap-4">
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={handleCreateNewForm}
Â  Â  Â  Â  Â  Â  Â  className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg font-medium flex items-center gap-2 transition-colors"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <FiPlus className="w-5 h-5" />
Â  Â  Â  Â  Â  Â  Â  Create New Form
Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={handleBrowseTemplates}
Â  Â  Â  Â  Â  Â  Â  className="bg-white hover:bg-gray-50 text-gray-700 px-6 py-3 rounded-lg font-medium flex items-center gap-2 border border-gray-300 transition-colors"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
Â  Â  Â  Â  Â  Â  Â  Â  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  Â  Browse Templates
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {showCreateForm && (
Â  Â  Â  Â  Â  <div className="bg-white rounded-lg shadow-sm border p-6 mb-8">
Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between mb-6">
Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-bold text-gray-900">Create Your Form</h2>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setShowCreateForm(false)}
Â  Â  Â  Â  Â  Â  Â  Â  className="text-gray-400 hover:text-gray-600 p-2 rounded-lg hover:bg-gray-100 transition-colors"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
Â  Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <InputQuery onBack={() => setShowCreateForm(false)} onSaveDraft={handleSaveForm} />
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  <div className="bg-white rounded-lg shadow-sm border">
Â  Â  Â  Â  Â  <div className="p-6 border-b border-gray-200">
Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between">
Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-bold text-gray-900">Your Forms</h2>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleViewAllForms}
Â  Â  Â  Â  Â  Â  Â  Â  className="text-blue-500 hover:text-blue-600 font-medium"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  View All
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="p-6">
Â  Â  Â  Â  Â  Â  {error && (
Â  Â  Â  Â  Â  Â  Â  <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6 flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  <FiAlertCircle className="w-5 h-5" />
Â  Â  Â  Â  Â  Â  Â  Â  {error}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  {forms.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-12">
Â  Â  Â  Â  Â  Â  Â  Â  <svg className="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
Â  Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600 text-lg">No forms found. Start by creating one!</p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
Â  Â  Â  Â  Â  Â  Â  Â  {forms.slice(0, 6).map((form) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={form.form_id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow cursor-pointer"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate(`/forms/${form.form_id}`)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-start justify-between mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-900 line-clamp-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {form.title || 'Untitled Form'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="text-gray-400 hover:text-gray-600 p-1" onClick={(e) => e.stopPropagation()}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600 text-sm mb-4 line-clamp-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {form.description || 'No description provided'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-4 mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-1 text-sm text-gray-600">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {form.responses || 0} responses
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={getStatusBadge(form.status || 'draft')}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {form.status || 'draft'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500 text-xs">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Created {formatDate(form.createdAt || form.created_at || new Date())}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default Dashboard;